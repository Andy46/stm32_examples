
/* 
* This file is part of VL53L1 Platform 
* 
* Copyright (c) 2016, STMicroelectronics - All Rights Reserved 
* 
* License terms: BSD 3-clause "New" or "Revised" License. 
* 
* Redistribution and use in source and binary forms, with or without 
* modification, are permitted provided that the following conditions are met: 
* 
* 1. Redistributions of source code must retain the above copyright notice, this 
* list of conditions and the following disclaimer. 
* 
* 2. Redistributions in binary form must reproduce the above copyright notice, 
* this list of conditions and the following disclaimer in the documentation 
* and/or other materials provided with the distribution. 
* 
* 3. Neither the name of the copyright holder nor the names of its contributors 
* may be used to endorse or promote products derived from this software 
* without specific prior written permission. 
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
* 
*/

#include "vl53l1_platform.h"
#include <string.h>
#include <time.h>
#include <math.h>

#include "i2c.h"

#define SENSOR_OK     0
#define SENSOR_ERROR -1

int8_t VL53L1_WriteMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
//#ifdef DEBUG
//    printf("Writing to I2C!\n");
//    printf("Address: 0x%x\n", dev);
//    printf("Reg: 0x%x\n", index);
//    printf("Len: %ld\n", count);
//#endif

    // Address has to be moved 1 bit to the left
    dev = dev << 1;

    // Compose transmission buffer (address + data)
    uint8_t buffer[count+2];
    buffer[0] = (index >> 8) & 0xFF;
    buffer[1] = (index >> 0) & 0xFF;
    memcpy(&(buffer[2]), pdata, count);

    // Send buffer
    HAL_I2C_Master_Transmit(&hi2c1, dev, buffer, sizeof(buffer), 1000);
    // HAL_Delay(100);

    return 0;
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count)
{
//#ifdef DEBUG
//    printf("Reading from I2C!\n");
//    printf("Address: 0x%x\n", dev);
//    printf("Reg: 0x%x\n", index);
//    printf("Len: %ld\n", count);
//#endif

    // Address has to be moved 1 bit to the left
    dev = dev << 1;

    uint8_t buffer[2];
    buffer[0] = (index >> 8) & 0xFF;
    buffer[1] = (index >> 0) & 0xFF;

    // Send command
    HAL_I2C_Master_Transmit(&hi2c1, dev, buffer, 2, 1000);
    // HAL_Delay(100);

    // Receive data
   HAL_I2C_Master_Receive(&hi2c1, dev, pdata, count, 1000);
//    HAL_Delay(1000);

    return SENSOR_OK;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
    // printf("VL53L1_WrByte!\n");
	return VL53L1_WriteMulti(dev, index, &data, sizeof(data));
}

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
    // printf("VL53L1_WrWord!\n");
    uint8_t buffer[sizeof(data)] {
        (data >> 8) && 0xFF,
        (data >> 0) && 0xFF,
    };
	return VL53L1_WriteMulti(dev, index, buffer, sizeof(buffer));
}

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
    // printf("VL53L1_WrDWord!\n");
   uint8_t buffer[sizeof(data)] {
       (data >> 24) && 0xFF,
       (data >> 16) && 0xFF,
       (data >>  8) && 0xFF,
       (data >>  0) && 0xFF,
   };
	return VL53L1_WriteMulti(dev, index, buffer, sizeof(data));
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
//    printf("VL53L1_RdByte!\n");
	return VL53L1_ReadMulti(dev, index, data, sizeof(uint8_t));
}

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
    // printf("VL53L1_RdWord!\n");
    uint8_t buffer[sizeof(data)];
    VL53L1_ReadMulti(dev, index, buffer, sizeof(uint16_t));
    *data=(buffer[0]<<8) | buffer[1];
	return 0;
}

int8_t VL53L1_RdDWord(uint16_t dev, uint16_t index, uint32_t *data) {
    // printf("VL53L1_RdDWord!\n");
    uint8_t buffer[sizeof(data)];
    VL53L1_ReadMulti(dev, index, buffer, sizeof(uint32_t));
    *data=(buffer[0]<<24) | (buffer[1]<<16) | (buffer[2]<<8) | buffer[3];
	return 0;
}

int8_t VL53L1_WaitMs(uint16_t dev, int32_t wait_ms){
	HAL_Delay(wait_ms);
	return 0;
}
